workflows:
  vcmi-ios-workflow:
    name: VCMI iOS Build
    environment:
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install system dependencies
        script: |
          brew install \
            autoconf \
            automake \
            libtool \
            pkg-config \
            cmake \
            gettext \
            ninja \
            wget \
            git \
            boost \
            sdl2 \
            sdl2_image \
            sdl2_ttf \
            sdl2_mixer \
            ffmpeg

      - name: Clone VCMI
        script: |
          git clone --recursive https://github.com/vcmi/vcmi.git
          cd vcmi
          echo "=== Checking project structure ==="
          find . -name "*.cpp" | head -5
          find . -name "*.h" | head -5

      - name: Create iOS app structure
        script: |
          cd vcmi
          # Создаем базовую структуру iOS приложения
          mkdir -p ios-app/vcmi.app
          cat > ios-app/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleDevelopmentRegion</key>
              <string>en</string>
              <key>CFBundleExecutable</key>
              <string>vcmi</string>
              <key>CFBundleIdentifier</key>
              <string>com.vcmi.vcmi</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
              <key>CFBundleName</key>
              <string>VCMI</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSRequiresIPhoneOS</key>
              <true/>
              <key>UISupportedInterfaceOrientations</key>
              <array>
                  <string>UIInterfaceOrientationLandscapeLeft</string>
                  <string>UIInterfaceOrientationLandscapeRight</string>
                  <string>UIInterfaceOrientationPortrait</string>
                  <string>UIInterfaceOrientationPortraitUpsideDown</string>
              </array>
              <key>MinimumOSVersion</key>
              <string>10.0</string>
          </dict>
          </plist>
          EOF

      - name: Build VCMI for iOS simulator (тестовый вариант)
        script: |
          cd vcmi
          mkdir -p build-ios
          cd build-ios
          
          # Пробуем собрать для симулятора сначала
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_SYSROOT=iphonesimulator \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.0 \
            -DCMAKE_CXX_FLAGS="-arch x86_64" \
            -DENABLE_TEST=OFF \
            -DENABLE_LAUNCHER=OFF \
            -DENABLE_EDITOR=OFF
          
          cmake --build . --config Release --parallel $(sysctl -n hw.ncpu)

      - name: Try alternative build approach
        script: |
          cd vcmi
          mkdir -p build-alternative
          cd build-alternative
          
          # Пробуем собрать нативный бинарник
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_TEST=OFF \
            -DENABLE_LAUNCHER=OFF \
            -DENABLE_EDITOR=OFF
          
          # Собираем только основные компоненты
          make -j4 client
          
          # Проверяем, что собралось
          if [ -f "bin/vcmi" ]; then
            echo "Binary built successfully"
            file bin/vcmi
          else
            echo "Trying to find any built binaries..."
            find . -name "vcmi" -type f
          fi

      - name: Create minimal iOS package
        script: |
          cd vcmi
          
          # Создаем минимальный .app bundle для тестирования
          mkdir -p Payload/vcmi.app
          cp ios-app/Info.plist Payload/vcmi.app/
          
          # Пробуем найти скомпилированный бинарник
          if [ -f "build-alternative/bin/vcmi" ]; then
            cp build-alternative/bin/vcmi Payload/vcmi.app/
            chmod +x Payload/vcmi.app/vcmi
          else
            # Создаем заглушку
            echo "#!/bin/sh" > Payload/vcmi.app/vcmi
            echo "echo 'VCMI iOS App'" >> Payload/vcmi.app/vcmi
            chmod +x Payload/vcmi.app/vcmi
          fi
          
          # Создаем .ipa
          zip -r vcmi-ios-unsigned.ipa Payload
          mv vcmi-ios-unsigned.ipa $CM_BUILD_DIR/
          
          echo "=== Created IPA structure ==="
          ls -la Payload/vcmi.app/

      - name: Debug information
        script: |
          cd vcmi
          echo "=== Build results ==="
          find . -name "*.app" -type d
          find . -name "vcmi" -type f
          echo "=== CMake cache ==="
          find . -name "CMakeCache.txt" -exec head -20 {} \; 2>/dev/null || echo "No CMake cache found"

    artifacts:
      - vcmi-ios-unsigned.ipa
      - vcmi/build-*/bin/*
      - vcmi/Payload/

    publishing:
      email:
        recipients:
          - user@example.com # Замените на ваш email