workflows:
  build-vcmi-ios:
    name: Build VCMI iOS (Release)
    max_build_duration: 120
    environment:
      xcode: latest
      vars:
        BUILD_PRESET: "ios-release-conan"
        BUILD_TYPE: "Release"
        BUNDLE_IDENTIFIER_PREFIX: "com.example"
        DEFAULT_TEAM: "0000000000"
        APP_NAME: "VCMI"
    scripts:
      - name: Install system dependencies
        script: |
          brew update
          brew install cmake conan ccache git git-lfs
          git lfs install || true
          conan --version
          cmake --version

      - name: Ensure submodules (dependencies) are present (robust)
        script: |
          echo ">>> sync & init submodules (robust)"
          git submodule sync --recursive || true

          # Try init+update recursively (shallow first to speed up)
          git submodule update --init --recursive --depth 1 || true

          # Try full update if still missing
          if [ ! -d dependencies ]; then
            echo "dependencies not found after shallow update — trying full update"
            git submodule update --init --recursive || true
          fi

          # If still missing, try to clone the submodule directly (public repo)
          if [ ! -d dependencies ]; then
            echo "dependencies still missing — attempting direct clone of vcmi-dependencies"
            git clone --depth 1 https://github.com/vcmi/vcmi-dependencies.git dependencies || {
              echo "Direct clone of dependencies failed — aborting"
              exit 1
            }
          fi

          # Ensure Git LFS is initialized and pull LFS objects for repo and submodule
          git lfs install || true
          echo "Running git lfs pull in repo root..."
          git lfs pull || true
          echo "Running git lfs pull in dependencies/ (if present)..."
          if [ -d dependencies ]; then
            (cd dependencies && git lfs pull) || true
          fi

          echo ">>> Submodule status:"
          git submodule status --recursive || true
          echo ">>> Listing dependencies directory (first 200 lines):"
          ls -la dependencies || true
          ls -la dependencies | sed -n '1,200p' || true

      - name: Create Conan profiles (safe, no heredoc indentation issues)
        script: |
          mkdir -p ~/.conan2/profiles
          # default build profile (macOS) - adjust arch/compiler version if needed
          printf '%s\n' \
            '[settings]' \
            'os=Macos' \
            'os.version=13' \
            'arch=x86_64' \
            'compiler=apple-clang' \
            'compiler.version=14' \
            'compiler.libcxx=libc++' \
            'build_type=Release' > ~/.conan2/profiles/default
          echo "Created ~/.conan2/profiles/default"

          # ios host profile
          printf '%s\n' \
            '[settings]' \
            'os=iOS' \
            'os.version=10.0' \
            'arch=armv8' \
            'compiler=apple-clang' \
            'compiler.cppstd=17' \
            'compiler.libcxx=libc++' \
            'build_type=Release' \
            '' \
            '[conf]' \
            'tools.build:cxxflags=["-stdlib=libc++"]' \
            'tools.build:compiler_executables={"c": "clang", "cpp": "clang++"}' > ~/.conan2/profiles/ios-armv8
          echo "Created ~/.conan2/profiles/ios-armv8"

          ls -la ~/.conan2/profiles || true
          echo "---- default ----"
          cat ~/.conan2/profiles/default || true
          echo "---- ios-armv8 ----"
          cat ~/.conan2/profiles/ios-armv8 || true

      - name: Run Conan install (with PYTHONPATH)
        script: |
          echo "PWD: $PWD"
          export PYTHONPATH="$PWD:$PYTHONPATH"
          echo "PYTHONPATH=$PYTHONPATH"
          conan install . \
            --output-folder=conan-generated \
            --build=missing \
            -pr:b=default \
            -pr:h=ios-armv8

      - name: Configure project with CMake preset
        script: |
          TEAM_ID=${DEVELOPMENT_TEAM:-$DEFAULT_TEAM}
          cmake --preset $BUILD_PRESET \
            -D BUNDLE_IDENTIFIER_PREFIX=$BUNDLE_IDENTIFIER_PREFIX \
            -D CMAKE_BUILD_TYPE=$BUILD_TYPE \
            -D ENABLE_CCACHE=ON \
            -D CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=$TEAM_ID \
            -D CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_STYLE=Automatic

      - name: Build VCMI via CMake
        script: |
          cmake --build build-$BUILD_PRESET --target vcmiclient -- -quiet

      - name: Package IPA using CPack
        script: |
          cd build-$BUILD_PRESET || exit 1
          cpack -C Release || true
          if ls *.zip >/dev/null 2>&1; then
            ZIPFILE=$(ls *.zip | head -n 1)
            mv "$ZIPFILE" "${ZIPFILE%.zip}.ipa"
          fi
          echo "Artifacts in $(pwd):"
          ls -la

    artifacts:
      - build-ios-release-conan/*.ipa
      - build-ios-release-conan/*.zip

    publishing:
      email:
        recipients:
          - your_email@example.com
